/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Chat App API
 * API specification for the Chat application
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";

import type { ErrorResponse, SignupRequest, SignupResponse } from "../models";
import type { BodyType, ErrorType } from "../mutator/custom-instance";
import { customInstance } from "../mutator/custom-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Register a new user with email and password
 * @summary Create a new user account
 */
export const signup = (
  signupRequest: BodyType<SignupRequest>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SignupResponse>(
    {
      url: `http://localhost:8080/signup`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signupRequest,
      signal,
    },
    options,
  );
};

export const getSignupMutationOptions = <
  TError = ErrorType<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signup>>,
    TError,
    { data: BodyType<SignupRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signup>>,
  TError,
  { data: BodyType<SignupRequest> },
  TContext
> => {
  const mutationKey = ["signup"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signup>>,
    { data: BodyType<SignupRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return signup(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof signup>>
>;
export type SignupMutationBody = BodyType<SignupRequest>;
export type SignupMutationError = ErrorType<ErrorResponse>;

/**
 * @summary Create a new user account
 */
export const useSignup = <
  TError = ErrorType<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signup>>,
    TError,
    { data: BodyType<SignupRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof signup>>,
  TError,
  { data: BodyType<SignupRequest> },
  TContext
> => {
  const mutationOptions = getSignupMutationOptions(options);

  return useMutation(mutationOptions);
};
